import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.storage.*;

import java.io.FileInputStream;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CopyFilesToGCPBucket {
    public static void main(String[] args) {
        String bucketName = "my-bucket";
        String sourceDirectory = "/path/to/local/directory";
        String destinationDirectory = "new-directory";

        // Set up Google Cloud Storage client
        Storage storage;
        try {
            storage = StorageOptions.newBuilder()
                    .setCredentials(GoogleCredentials.fromStream(new FileInputStream("/path/to/credentials.json")))
                    .build()
                    .getService();
        } catch (Exception e) {
            System.err.println("Error initializing Google Cloud Storage client: " + e.getMessage());
            return;
        }

        // Create destination folder based on current date
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String currentDate = dateFormat.format(new Date());
        String destinationFolder = destinationDirectory + "/" + currentDate;

        // Create the folder in the bucket if it doesn't exist
        BlobId folderBlobId = BlobId.of(bucketName, destinationFolder);
        if (!storage.get(folderBlobId).exists()) {
            BlobInfo folderBlobInfo = BlobInfo.newBuilder(folderBlobId).build();
            storage.create(folderBlobInfo);
        }

        // Copy new files from the source directory to the destination folder in the bucket
        File sourceDir = new File(sourceDirectory);
        for (File file : sourceDir.listFiles()) {
            if (file.isFile()) {
                try {
                    Path sourcePath = file.toPath();
                    String destinationFilePath = destinationFolder + "/" + file.getName();
                    BlobId blobId = BlobId.of(bucketName, destinationFilePath);
                    BlobInfo blobInfo = BlobInfo.newBuilder(blobId)
                            .setContentType(Files.probeContentType(sourcePath))
                            .build();
                    storage.create(blobInfo, Files.readAllBytes(sourcePath));
                    System.out.println("File " + file.getName() + " uploaded to GCS bucket.");

                    // Move the file to the new directory
                    File destinationDir = new File("/path/to/new/directory/" + destinationFolder);
                    if (!destinationDir.exists()) {
                        destinationDir.mkdirs();
                    }
                    Path destinationPath = destinationDir.toPath().resolve(file.getName());
                    Files.move(sourcePath, destinationPath, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("File " + file.getName() + " moved to " + destinationPath);

                } catch (Exception e) {
                    System.err.println("Error processing file " + file.getName() + ": " + e.getMessage());
                }
            }
        }

        // Delete the content of the source directory
        for (File file : sourceDir.listFiles()) {
            if (file.isFile()) {
                try {
                    file.delete();
                    System.out.println("File " + file.getName() + " deleted from source directory.");
                } catch (Exception e) {
                    System.err.println("Error deleting file " + file.getName() + ": " + e.getMessage());
                }
            }
        }
    }
}

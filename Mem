import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.storage.*;

import java.io.FileInputStream;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CopyFilesToGCPBucket {
    public static void main(String[] args) {
        String bucketName = "my-bucket";
        String sourceDirectory = "/path/to/local/directory";
        String destinationDirectory = "datewise-folder";

        // Set up Google Cloud Storage client (Create a single instance)
        Storage storage = StorageOptions.newBuilder()
                    .setProjectId(projectId)
                    .build()
                    .getService();

        File sourceDir = new File(sourceDirectory);
        for (File file : sourceDir.listFiles()) {
            if (file.isFile()) {
                try {
                    // Open FileInputStream with try-with-resources
                    try (FileInputStream fileInputStream = new FileInputStream(file)) {
                        // Create destination folder based on current date
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        String currentDate = dateFormat.format(new Date());
                        String destinationFolder = destinationDirectory + "/" + currentDate + "/";

                        // Create the folder in the bucket if it doesn't exist
                        BlobId folderBlobId = BlobId.of(bucketName, destinationFolder);
                        Blob blob = storage.get(folderBlobId);
                        if (blob == null || !blob.exists() || !blob.isDirectory) {
                            BlobInfo folderBlobInfo = BlobInfo.newBuilder(folderBlobId).build();
                            storage.create(folderBlobInfo);
                        }

                        // Construct destination file path
                        String destinationFilePath = destinationFolder + file.getName();
                        BlobId blobId = BlobId.of(bucketName, destinationFilePath);
                        // Upload directly from FileInputStream
                        BlobInfo blobInfo = BlobInfo.newBuilder(blobId)
                                .setContentType(Files.probeContentType(file.toPath()))
                                .build();
                        storage.create(blobInfo, fileInputStream);

                        // Move the file to another directory
                        File destinationDir = new File("/usr/path");
                        if (!destinationDir.exists()) {
                            destinationDir.mkdirs();
                        }
                        Path destinationPath = destinationDir.toPath().resolve(file.getName());
                        Files.move(file.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING);
                        System.out.println("File " + file.getName() + " moved to " + destinationPath);

                        // Delete the original file
                        file.delete();
                        System.out.println("File " + file.getName() + " deleted.");
                    } // FileInputStream is automatically closed at the end of the try block

                } catch (Exception e) {
                    System.err.println("Error processing file " + file.getName() + ": " + e.getMessage());
                    e.printStackTrace(); // Print the exception trace
                }
            }
        }

        // Close the Storage client at the end
        storage.close();
    }
}
